<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper
  PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
  "https://mybatis.org/dtd/mybatis-3-mapper.dtd">
  
 <mapper namespace="crafty.mapper.GoodsMapper">
 	
 	<!-- 등록된 굿즈 전부 -->
 	<!-- getManagementGoods -->
 	<select id="getManagementGoods" parameterType="crafty.pagination.dto.PageRequestDTO"
									   resultType="crafty.dto.ResponseGoodsManagement">
			SELECT goods_id, goods_name, member_id, nickname, amount, adjustment_created_at, last_total_amount
			FROM (
			    SELECT g.goods_id,
			           g.goods_name,
			           g.member_id,
			           m.nickname,
			           NVL(SUM(o.item_total_amount), 0) AS amount,
			           NVL(ao.adjustment_created_at, '1111-11-11') AS adjustment_created_at,
			           NVL(ao.last_total_amount, 0) AS last_total_amount,
			           ROW_NUMBER() OVER (ORDER BY g.goods_id DESC) AS rn
			    FROM GOODS g
			    LEFT JOIN MEMBER m ON g.member_id = m.member_id
			    LEFT JOIN ORDERS o ON g.goods_id = o.goods_id
			    LEFT JOIN ADJUSTMENT_ORDER ao ON g.goods_id = ao.goods_id
			    GROUP BY g.goods_id, g.goods_name, g.member_id, m.nickname, ao.adjustment_created_at, ao.last_total_amount
			)
		<![CDATA[
			WHERE rn > (#{pageNum} - 1) * #{amount}
			  AND rn <= #{pageNum} * #{amount}
		]]>
	</select>
 	
 	<select id="getTotalManagementGoodsCount" resultType="_int">
		SELECT count(goods_id)
		FROM GOODS
	</select>
	
	<!-- 비공개 요청 굿즈 -->
	<select id="getNondisclosureRequestGoods" parameterType="crafty.pagination.dto.PageRequestDTO" 
												resultType="crafty.dto.ResponseNondisclosureRequest">
		SELECT goods_id, goods_name, member_id, nickname, nondisclosure_created_at, nondisclosure_reason
		FROM(
			SELECT ROWNUM AS rn, g.goods_id, g.goods_name, g.member_id, m.nickname, nd.nondisclosure_created_at, nd.nondisclosure_reason
			FROM GOODS g
			JOIN MEMBER m ON m.member_id = g.member_id
			JOIN NONDISCLOSURE_REQUEST nd ON nd.goods_id = g.goods_id
			WHERE g.nondisclosure_status != 1
		)
		<![CDATA[
			WHERE rn > (#{pageNum} - 1) * #{amount}
			  AND rn <= #{pageNum} * #{amount}
		]]>
	</select>
	
	<select id="getNondisclosureRequestGoodsCount" resultType="_int">
		SELECT COUNT(g.goods_id)
		FROM GOODS g
		JOIN MEMBER m ON m.member_id = g.member_id
		JOIN NONDISCLOSURE_REQUEST nd ON nd.goods_id = g.goods_id
		WHERE g.nondisclosure_status != 1
	</select>
	
	<select id="getRegisterRequestGoods" parameterType="crafty.pagination.dto.PageRequestDTO" 
												resultType="crafty.dto.ResponseRegisterRequest">
		SELECT goods_id, goods_name, member_id, nickname, goods_created_at
		FROM(
			SELECT ROWNUM AS rn, g.goods_id, g.goods_name, g.member_id, m.nickname, g.goods_created_at
			FROM GOODS g
			JOIN MEMBER m ON m.member_id = g.member_id
			WHERE g.registration_status != 1
		)
		<![CDATA[
			WHERE rn > (#{pageNum} - 1) * #{amount}
			  AND rn <= #{pageNum} * #{amount}
		]]>
	</select>
	
	<select id="getRegisterRequestGoodsCount" resultType="_int">
		SELECT COUNT(g.goods_id)
		FROM GOODS g
		JOIN MEMBER m ON m.member_id = g.member_id
		WHERE g.registration_status != 1
	</select>
	
	<select id="getGoodsByGoodsId" resultType="crafty.dto.ResponseGoodsDetail">
        SELECT g.goods_id, g.goods_name, g.introduction, m.member_id, m.nickname, m.profile_img, g.start_date, g.end_date, g.ongoing_status, g.registration_status
        FROM GOODS g
        JOIN MEMBER m on m.member_id = g.member_id
        WHERE g.goods_id = #{goodsId}
    </select>
	
	<select id="getGoodsThumbnailImgNameByGoodsId" resultType="string">
        SELECT img_name
        FROM GOODS_DESCRIPTION_IMG
        WHERE goods_id = #{goodsId} AND img_position = 1
    </select>
    
    <select id="getGoodsContentImgNameByGoodsId" resultType="string">
        SELECT img_name
        FROM GOODS_DESCRIPTION_IMG
        WHERE goods_id = #{goodsId} AND img_position = 0
    </select>
    
	<!-- 프로필 굿즈 리스트 -->
    <select id="getGoodsByMemberId" parameterType="hashmap">
        SELECT goods_id, goods_name, introduction, img_path, img_name, category, total, target_amount, like_id, alarm_id
        FROM(
            SELECT ROWNUM AS rn, goods_id, goods_name, introduction, img_path, img_name, category, total, target_amount, like_id, alarm_id
            FROM(
                SELECT g.goods_id, g.goods_name, g.introduction, gd.img_path, gd.img_name, g.category,
                        NVL(SUM(o.total_amount), 0) AS total, g.target_amount, NVL(like_id, 0) AS like_id, NVL(alarm_id, 0) AS alarm_id
                FROM goods g
                LEFT JOIN ORDERS o ON o.goods_id = g.goods_id
                LEFT JOIN likes l ON l.member_id = #{sessionMemberId} AND l.goods_id = g.goods_id
                JOIN GOODS_DESCRIPTION_IMG gd ON gd.goods_id = g.goods_id
                LEFT JOIN open_alarm oa ON oa.member_id = #{sessionMemberId} AND oa.goods_id = g.goods_id
                WHERE g.member_id = #{profileMemberId} AND gd.img_position = 1
                <if test="ongoing == 0">AND g.ongoing_status = 0</if>
                <if test="ongoing == 1">AND g.ongoing_status = 1</if>
                <if test="ongoing == 2">AND g.ongoing_status = 2</if>
                GROUP BY g.goods_id, g.goods_name, g.introduction, gd.img_path, gd.img_name, 
                        g.category, like_id, alarm_id, g.goods_created_at, g.target_amount
                ORDER BY g.goods_created_at DESC
            )
        )
        <![CDATA[
            WHERE rn > (#{pageRequest.pageNum} - 1) * #{pageRequest.amount}
              AND rn <= #{pageRequest.pageNum} * #{pageRequest.amount}
        ]]>
    </select>

    <select id="getTotalGoodsByMemberId" resultType="_int">
        SELECT COUNT(goods_id)
        FROM GOODS
        WHERE member_id = #{memberId}
        <if test="ongoing == 0">AND ongoing_status = 0</if>
        <if test="ongoing == 1">AND ongoing_status = 1</if>
        <if test="ongoing == 2">AND ongoing_status = 2</if>
    </select>
	
	<!-- getMainGoods -->
	<select id="getMainGoods"
			parameterType="crafty.pagination.dto.PageRequestDTO"
			resultType="crafty.pagination.dto.MainCard">

			SELECT goods_id,
				   goods_name,
				   introduction,
				   img_path,
				   img_name,
				   category,
				   total,
			       target_amount,
			       like_id,
			       alarm_id
			FROM (
					SELECT ROWNUM AS rn, goods_id,
										   goods_name,
										   introduction,
										   img_path,
										   img_name,
										   category,
										   total,
									       target_amount,
									       like_id,
									       alarm_id,
									       goods_created_at,
									       like_cnt		       
					FROM (  
							SELECT *
					        FROM (
					        		SELECT *
					        		FROM (
							        		SELECT *
											FROM (
													SELECT g.goods_id,
													       g.goods_name,
													       g.introduction,   
													       g.category,
													       g.ongoing_status,
													       g.production_status,
													       g.target_amount,
													       gd.img_path,
													       gd.img_name,
													       NVL(SUM(o.total_amount), 0) AS total,
													       NVL(like_id, 0) AS like_id,
													       NVL(alarm_id, 0) AS alarm_id,
													       g.goods_created_at,
													       (SELECT COUNT(*) FROM likes WHERE goods_id = g.goods_id) as like_cnt
													FROM goods g
													LEFT JOIN ORDERs o ON o.goods_id = g.goods_id
													JOIN GOODS_DESCRIPTION_IMG gd ON gd.goods_id = g.goods_id
													LEFT JOIN likes l ON l.member_id = #{memberId} AND l.goods_id = g.goods_id
													LEFT JOIN open_alarm oa ON oa.member_id = #{memberId} AND oa.goods_id = g.goods_id
													WHERE gd.img_position = 1 and g.nondisclosure_status = 0
													GROUP BY g.goods_id,
													         g.goods_name,
													         g.introduction,   
													         g.category,
													         g.ongoing_status,
													         g.production_status,
													         g.target_amount,
													         gd.img_path,
													         gd.img_name,
													         like_id,
													         alarm_id,
													         g.goods_created_at
											)
											<trim prefix="WHERE" prefixOverrides="AND |OR">
												<if test="pageRequest.keyword != null and pageRequest.keyword !=''">
												 	AND goods_name LIKE '%'||#{pageRequest.keyword}||'%'
												</if>
											</trim>
									)
								<where>
									<if test="pageProperties.category != null and pageProperties.category !='' and pageProperties.category !='전체'">
									 	category = #{pageProperties.category}
									</if>
								</where>
						)
						<where>
							<if test="pageProperties.ongoing == 0">ongoing_status = 0</if>
							<if test="pageProperties.ongoing == 1">ongoing_status = 1</if>
							<if test="pageProperties.ongoing == 2">ongoing_status = 2</if>
						</where>
	        		)
	    	)
	    	<![CDATA[
		        WHERE rn <= #{pageRequest.pageNum} * #{pageRequest.amount} and
		        	  rn > (#{pageRequest.pageNum} - 1) *  #{pageRequest.amount}
	        ]]>
			<if test="pageProperties.order == 0">ORDER BY like_cnt DESC</if>
	    	<if test="pageProperties.order == 1">ORDER BY goods_created_at DESC</if>
	</select>
	
	
	<select id="getMainGoodsTotalCount"
			parameterType="crafty.pagination.dto.PageRequestDTO" 
			resultType="_int">
		SELECT COUNT(*)
		FROM (  
				SELECT *
		        FROM (
		        		SELECT *
		        		FROM (
				        		SELECT *
								FROM (
										SELECT g.goods_id, g.ongoing_status
										FROM goods g
										LEFT JOIN ORDERs o ON o.goods_id = g.goods_id
										LEFT JOIN likes l ON l.member_id = 1 AND l.goods_id = g.goods_id
										JOIN GOODS_DESCRIPTION_IMG gd ON gd.goods_id = g.goods_id
										LEFT JOIN open_alarm oa ON oa.member_id = 1 AND oa.goods_id = g.goods_id
										WHERE gd.img_position = 1 and g.nondisclosure_status = 0
										<if test="pageRequest.keyword != null and pageRequest.keyword !=''">
										 	AND g.goods_name LIKE '%'||#{pageRequest.keyword}||'%'
										</if>
										<if test="pageProperties.category != null and pageProperties.category !='' and pageProperties.category !='전체'">
										 	AND g.category = #{pageProperties.category}
										</if>
										GROUP BY g.goods_id, g.ongoing_status
								)
						)
			)
			<where>
				<if test="pageProperties.ongoing == 0">ongoing_status = 0</if>
				<if test="pageProperties.ongoing == 1">ongoing_status = 1</if>
				<if test="pageProperties.ongoing == 2">ongoing_status = 2</if>
			</where>
      		)
	</select>
	
	<!-- registGoods -->
	<insert id="registerGoods" parameterType="crafty.dto.Goods" useGeneratedKeys="true">
		<selectKey keyProperty="goodsId" order="BEFORE" resultType="int">
			select goods_seq.nextval from dual
		</selectKey>
			INSERT INTO GOODS
			VALUES(
				#{goodsId},
				1,  
				#{goodsName},
				#{startDate},
				#{endDate},
				#{category},
				#{introduction},
				#{targetAmount},
				#{postDate},
				#{bankName},
				#{bankAccountNumber},
				1,
				#{ongoingStatus},
				#{productionStatus},
				#{registrationStatus},
				#{nondisclosureStatus},
				SYSDATE,
				SYSDATE			
		)
		
	</insert>
	
	<!-- 등록 굿즈 리스트 -->
	<select id="getRegisteredGoodsByMemberId" parameterType="hashmap" 
												resultType="crafty.dto.ResponseRegisteredGoods">
		SELECT goods_id, goods_name, goods_created_at, ongoing_status, production_status, registration_status
		FROM(
			SELECT ROWNUM AS rn, goods_id, goods_name, goods_created_at, ongoing_status, production_status, registration_status
			FROM GOODS
			WHERE member_id = #{memberId} AND nondisclosure_status = 0 <!-- 공개 상태인 굿즈만 가져옴 -->
			ORDER BY goods_created_at DESC
		)
		<![CDATA[
			WHERE rn > (#{pageRequest.pageNum} - 1) * #{pageRequest.amount}
			  AND rn <= #{pageRequest.pageNum} * #{pageRequest.amount}
		]]>
	</select>
	
	<select id="getTotalRegisteredGoodsByMemberId" resultType="_int">
		SELECT COUNT(goods_id)
		FROM GOODS
		WHERE member_id = #{memberId} AND nondisclosure_status = 0
	</select>
	
	<!-- registeredGoods Detail 페이지 -->
 	<select id="getRegisteredGoodsDetailByGoodsId" resultType="crafty.dto.ResponseRegisteredGoodsDetail">
 		SELECT g.goods_id, g.goods_name, gd.img_path, gd.img_name, g.start_date, g.end_date, COUNT(o.order_id) AS sales_num,
		                    (SELECT COUNT(oi.order_id)
		                         FROM ORDER_ITEMS oi
		                         WHERE oi.order_id IN (SELECT o2.order_id
		                                                FROM ORDERS o2
		                                                WHERE o2.goods_id = g.goods_id)) AS sales_total_num,
		                    SUM(o.item_total_amount) AS sales_total_amount
		FROM GOODS g
		JOIN GOODS_DESCRIPTION_IMG gd ON gd.goods_id = g.goods_id
		LEFT JOIN ORDERS o ON o.goods_id = g.goods_id
		WHERE g.goods_id = #{goodsId} AND gd.img_position = 1
		GROUP BY g.goods_id, g.goods_name, gd.img_path, gd.img_name, g.start_date, g.end_date
 	</select>
 	<!--  AND g.member_id = #{memberId} -->
	
	<!-- 굿즈 등록 상태 업데이트 -->
	<update id="updateGoodsRegistrationStatusAllowByGoodsId">
		UPDATE GOODS
		SET registration_status = 1
		WHERE goods_id = #{goodsId}
	</update>

	<!-- 등록 불허 -->
	<update id="updateGoodsRegistrationStatusDisallowByGoodsId">
		UPDATE GOODS
		SET registration_status = 2, goods_updated_at = SYSDATE
		WHERE goods_id = #{goodsId}
	</update>
	
	<!-- 굿즈 비공개 상태 업데이트 -->
	<update id="updateGoodsNondisclosureStatusByGoodsId">
		UPDATE GOODS
		SET nondisclosure_status = 1
		WHERE goods_id = #{goodsId}
	</update>
	
	
	
 </mapper>